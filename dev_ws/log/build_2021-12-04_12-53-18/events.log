[0.000000] (-) TimerEvent: {}
[0.000299] (-) JobUnselected: {'identifier': 'cpp_parameters'}
[0.000348] (-) JobUnselected: {'identifier': 'my_package'}
[0.000385] (-) JobUnselected: {'identifier': 'turtlesim'}
[0.000425] (cpp_pubsub) JobQueued: {'identifier': 'cpp_pubsub', 'dependencies': OrderedDict()}
[0.000463] (cpp_pubsub) JobStarted: {'identifier': 'cpp_pubsub'}
[0.051685] (cpp_pubsub) JobProgress: {'identifier': 'cpp_pubsub', 'progress': 'cmake'}
[0.054363] (cpp_pubsub) JobProgress: {'identifier': 'cpp_pubsub', 'progress': 'build'}
[0.056525] (cpp_pubsub) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/rtsd-user/dev_ws/build/cpp_pubsub', '--', '-j1', '-l1'], 'cwd': '/home/rtsd-user/dev_ws/build/cpp_pubsub', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'rtsd-user'), ('LC_TIME', 'nl_NL.UTF-8'), ('SSH_AGENT_PID', '1176'), ('XDG_SESSION_TYPE', 'x11'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib'), ('HOME', '/home/rtsd-user'), ('OLDPWD', '/home/rtsd-user/dev_ws/src/cpp_pubsub/src'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('LC_MONETARY', 'nl_NL.UTF-8'), ('MANAGERPID', '952'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('IM_CONFIG_PHASE', '1'), ('ROS_DISTRO', 'galactic'), ('LOGNAME', 'rtsd-user'), ('JOURNAL_STREAM', '8:30583'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'rtsd-user'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('WINDOWPATH', '2'), ('PATH', '/opt/ros/galactic/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'), ('SESSION_MANAGER', 'local/rtsd-vm:@/tmp/.ICE-unix/1227,unix/rtsd-vm:/tmp/.ICE-unix/1227'), ('INVOCATION_ID', 'd594878c5c95416db09fd8bf7e53ea2f'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'nl_NL.UTF-8'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/a7c96540_2db1_452f_b88e_829f7e071ea8'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('LC_TELEPHONE', 'nl_NL.UTF-8'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.110'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/opt/ros/galactic'), ('SHELL', '/bin/bash'), ('LC_NAME', 'nl_NL.UTF-8'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'nl_NL.UTF-8'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('LC_IDENTIFICATION', 'nl_NL.UTF-8'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/rtsd-user/dev_ws/build/cpp_pubsub'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/galactic/lib/python3.8/site-packages'), ('LC_NUMERIC', 'nl_NL.UTF-8'), ('LC_PAPER', 'nl_NL.UTF-8'), ('COLCON', '1'), ('VTE_VERSION', '6003'), ('CMAKE_PREFIX_PATH', '/opt/ros/galactic')]), 'shell': False}
[0.095492] (-) TimerEvent: {}
[0.181597] (cpp_pubsub) StdoutLine: {'line': b'\x1b[35m\x1b[1mScanning dependencies of target listener\x1b[0m\n'}
[0.195922] (-) TimerEvent: {}
[0.256646] (cpp_pubsub) StdoutLine: {'line': b'[ 25%] \x1b[32mBuilding CXX object CMakeFiles/listener.dir/src/subscriber_member_function.cpp.o\x1b[0m\n'}
[0.296399] (-) TimerEvent: {}
[0.401849] (-) TimerEvent: {}
[0.503659] (-) TimerEvent: {}
[0.604883] (-) TimerEvent: {}
[0.705431] (-) TimerEvent: {}
[0.811354] (-) TimerEvent: {}
[0.913673] (-) TimerEvent: {}
[1.014735] (-) TimerEvent: {}
[1.115329] (-) TimerEvent: {}
[1.219809] (-) TimerEvent: {}
[1.320262] (-) TimerEvent: {}
[1.420765] (-) TimerEvent: {}
[1.521331] (-) TimerEvent: {}
[1.621868] (-) TimerEvent: {}
[1.724368] (-) TimerEvent: {}
[1.829744] (-) TimerEvent: {}
[1.930298] (-) TimerEvent: {}
[2.030751] (-) TimerEvent: {}
[2.136631] (-) TimerEvent: {}
[2.238661] (-) TimerEvent: {}
[2.339165] (-) TimerEvent: {}
[2.442476] (-) TimerEvent: {}
[2.544198] (-) TimerEvent: {}
[2.645446] (-) TimerEvent: {}
[2.746237] (-) TimerEvent: {}
[2.846663] (-) TimerEvent: {}
[2.950302] (-) TimerEvent: {}
[3.050769] (-) TimerEvent: {}
[3.151205] (-) TimerEvent: {}
[3.251707] (-) TimerEvent: {}
[3.352298] (-) TimerEvent: {}
[3.452825] (-) TimerEvent: {}
[3.553354] (-) TimerEvent: {}
[3.653915] (-) TimerEvent: {}
[3.762200] (-) TimerEvent: {}
[3.863882] (-) TimerEvent: {}
[3.964387] (-) TimerEvent: {}
[4.065788] (-) TimerEvent: {}
[4.171218] (-) TimerEvent: {}
[4.271631] (-) TimerEvent: {}
[4.372204] (-) TimerEvent: {}
[4.472724] (-) TimerEvent: {}
[4.578753] (-) TimerEvent: {}
[4.681633] (-) TimerEvent: {}
[4.782216] (-) TimerEvent: {}
[4.883247] (-) TimerEvent: {}
[4.993177] (-) TimerEvent: {}
[5.093547] (-) TimerEvent: {}
[5.193979] (-) TimerEvent: {}
[5.297423] (-) TimerEvent: {}
[5.399982] (-) TimerEvent: {}
[5.500501] (-) TimerEvent: {}
[5.601414] (-) TimerEvent: {}
[5.701843] (-) TimerEvent: {}
[5.803961] (-) TimerEvent: {}
[5.904521] (-) TimerEvent: {}
[6.005008] (-) TimerEvent: {}
[6.106926] (-) TimerEvent: {}
[6.207344] (-) TimerEvent: {}
[6.294147] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[KMinimalSubscriber::MinimalSubscriber()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.294514] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:70:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99)\n'}
[6.294726] (cpp_pubsub) StderrLine: {'line': b'   70 |         "image", qos, &MinimalSubscriber::topic_callback\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[6.295085] (cpp_pubsub) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[6.295431] (cpp_pubsub) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/9/memory:81\x1b[m\x1b[K,\n'}
[6.295629] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:17\x1b[m\x1b[K:\n'}
[6.295893] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:309:19:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Tp>&) [with _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.296097] (cpp_pubsub) StderrLine: {'line': b'  309 |       shared_ptr& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr&) noexcept = default;\n'}
[6.296349] (cpp_pubsub) StderrLine: {'line': b'      |                   \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.296639] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:309:29:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::shared_ptr<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.297544] (cpp_pubsub) StderrLine: {'line': b'  309 |       shared_ptr& operator=(\x1b[01;36m\x1b[Kconst shared_ptr&\x1b[m\x1b[K) noexcept = default;\n'}
[6.302884] (cpp_pubsub) StderrLine: {'line': b'      |                             \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.304453] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:313:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Yp>&) [with _Yp = _Yp; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.304817] (cpp_pubsub) StderrLine: {'line': b'  313 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr<_Yp>& __r) noexcept\n'}
[6.305022] (cpp_pubsub) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.305230] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:313:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.306320] (cpp_pubsub) StderrLine: {'line': b'/usr/include/c++/9/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = const std::shared_ptr<rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > > >&; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.308975] (-) TimerEvent: {}
[6.310433] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:313:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >::operator=<_Yp>(const std::shared_ptr<_Tp>&) [with _Yp = rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.310673] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:70:57:\x1b[m\x1b[K   required from here\n'}
[6.310804] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:111:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.310946] (cpp_pubsub) StderrLine: {'line': b'  111 |  using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[6.311065] (cpp_pubsub) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.311181] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:324:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::operator=(std::auto_ptr<_Up>&&) [with _Yp = _Yp; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.311307] (cpp_pubsub) StderrLine: {'line': b'  324 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(auto_ptr<_Yp>&& __r)\n'}
[6.313879] (cpp_pubsub) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.314036] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:324:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.314161] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:70:57:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::auto_ptr<_Up>\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.314292] (cpp_pubsub) StderrLine: {'line': b'   70 |         "image", qos, &MinimalSubscriber::topic_callback\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[6.316639] (cpp_pubsub) StderrLine: {'line': b'      |                                                         \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[6.316776] (cpp_pubsub) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/9/memory:81\x1b[m\x1b[K,\n'}
[6.316897] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:17\x1b[m\x1b[K:\n'}
[6.317016] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:333:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.317234] (cpp_pubsub) StderrLine: {'line': b'  333 |       \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr&& __r) noexcept\n'}
[6.317368] (cpp_pubsub) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.317484] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:333:30:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.317606] (cpp_pubsub) StderrLine: {'line': b'  333 |       operator=(\x1b[01;36m\x1b[Kshared_ptr&& __r\x1b[m\x1b[K) noexcept\n'}
[6.317739] (cpp_pubsub) StderrLine: {'line': b'      |                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[6.317856] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:341:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Yp>&&) [with _Yp = _Yp; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.317975] (cpp_pubsub) StderrLine: {'line': b'  341 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr<_Yp>&& __r) noexcept\n'}
[6.318090] (cpp_pubsub) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.320350] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:341:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.320571] (cpp_pubsub) StderrLine: {'line': b'/usr/include/c++/9/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = std::shared_ptr<rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > > >; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.320724] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:341:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >::operator=<_Yp>(std::shared_ptr<_Tp>&&) [with _Yp = rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.320858] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:70:57:\x1b[m\x1b[K   required from here\n'}
[6.320982] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:111:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.321186] (cpp_pubsub) StderrLine: {'line': b'  111 |  using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[6.321310] (cpp_pubsub) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.321427] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:349:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::operator=(std::unique_ptr<_Up, _Ep>&&) [with _Yp = _Yp; _Del = _Del; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.321547] (cpp_pubsub) StderrLine: {'line': b'  349 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(unique_ptr<_Yp, _Del>&& __r)\n'}
[6.321663] (cpp_pubsub) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.321778] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:349:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.321895] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:70:57:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.322023] (cpp_pubsub) StderrLine: {'line': b'   70 |         "image", qos, &MinimalSubscriber::topic_callback\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[6.324402] (cpp_pubsub) StderrLine: {'line': b'      |                                                         \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[6.409309] (-) TimerEvent: {}
[6.510362] (-) TimerEvent: {}
[6.617024] (-) TimerEvent: {}
[6.717607] (-) TimerEvent: {}
[6.818110] (-) TimerEvent: {}
[6.918543] (-) TimerEvent: {}
[7.019063] (-) TimerEvent: {}
[7.122162] (-) TimerEvent: {}
[7.225620] (-) TimerEvent: {}
[7.326252] (-) TimerEvent: {}
[7.430937] (-) TimerEvent: {}
[7.532668] (-) TimerEvent: {}
[7.633213] (-) TimerEvent: {}
[7.734523] (-) TimerEvent: {}
[7.835161] (-) TimerEvent: {}
[7.936897] (-) TimerEvent: {}
[8.038028] (-) TimerEvent: {}
[8.138540] (-) TimerEvent: {}
[8.159488] (cpp_pubsub) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29\x1b[m\x1b[K,\n'}
[8.160730] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26\x1b[m\x1b[K,\n'}
[8.161081] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[8.161290] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[8.163493] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[8.164342] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[8.165472] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:36\x1b[m\x1b[K,\n'}
[8.168188] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[8.168867] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[8.169142] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[8.169332] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:20\x1b[m\x1b[K:\n'}
[8.169519] (cpp_pubsub) StderrLine: {'line': b'/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = void (MinimalSubscriber::*)() const; MessageT = MinimalSubscriber; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.169978] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = void (MinimalSubscriber::*)() const; AllocatorT = std::allocator<void>; CallbackMessageT = MinimalSubscriber; SubscriptionT = rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.170823] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = void (MinimalSubscriber::*)() const; AllocatorT = std::allocator<void>; CallbackMessageT = MinimalSubscriber; SubscriptionT = rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.171021] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = void (MinimalSubscriber::*)() const; AllocatorT = std::allocator<void>; CallbackMessageT = MinimalSubscriber; SubscriptionT = rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.171162] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = void (MinimalSubscriber::*)() const; AllocatorT = std::allocator<void>; CallbackMessageT = MinimalSubscriber; SubscriptionT = rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.171348] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:70:57:\x1b[m\x1b[K   required from here\n'}
[8.171479] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<MinimalSubscriber, std::allocator<void> >::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<MinimalSubscriber, void (MinimalSubscriber::*)() const, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(MinimalSubscriber&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[8.171622] (cpp_pubsub) StderrLine: {'line': b'  185 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[8.171787] (cpp_pubsub) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.176404] (cpp_pubsub) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:23\x1b[m\x1b[K,\n'}
[8.177965] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29\x1b[m\x1b[K,\n'}
[8.178119] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26\x1b[m\x1b[K,\n'}
[8.178241] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[8.178359] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[8.178475] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[8.180824] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[8.180976] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:36\x1b[m\x1b[K,\n'}
[8.181099] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[8.181219] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[8.181336] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[8.181523] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:20\x1b[m\x1b[K:\n'}
[8.181670] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1291:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.181811] (cpp_pubsub) StderrLine: {'line': b' 1291 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[8.182166] (cpp_pubsub) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[8.182319] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1291:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<MinimalSubscriber, void (MinimalSubscriber::*)() const, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(MinimalSubscriber&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.183735] (cpp_pubsub) StderrLine: {'line': b' 1291 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[8.183886] (cpp_pubsub) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.184092] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1292:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.184225] (cpp_pubsub) StderrLine: {'line': b' 1292 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[8.184343] (cpp_pubsub) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[8.191601] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1292:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<MinimalSubscriber, void (MinimalSubscriber::*)() const, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(MinimalSubscriber&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.191819] (cpp_pubsub) StderrLine: {'line': b' 1292 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[8.191942] (cpp_pubsub) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[8.192060] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1354:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.199451] (cpp_pubsub) StderrLine: {'line': b' 1354 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[8.199871] (cpp_pubsub) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[8.200044] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1354:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[8.200169] (cpp_pubsub) StderrLine: {'line': b'/usr/include/c++/9/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(MinimalSubscriber&)>&&; <template-parameter-2-2> = std::enable_if<true, void>::type; _Types = {std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.200311] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1350:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const MinimalSubscriber&)>, std::function<void(const MinimalSubscriber&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >)>, std::function<void(std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const MinimalSubscriber>)>, std::function<void(std::shared_ptr<const MinimalSubscriber>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&)>, std::function<void(const std::shared_ptr<const MinimalSubscriber>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<MinimalSubscriber>)>, std::function<void(std::shared_ptr<MinimalSubscriber>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(MinimalSubscriber&)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.200490] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = void (MinimalSubscriber::*)() const; MessageT = MinimalSubscriber; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.200635] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = void (MinimalSubscriber::*)() const; AllocatorT = std::allocator<void>; CallbackMessageT = MinimalSubscriber; SubscriptionT = rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.200945] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = void (MinimalSubscriber::*)() const; AllocatorT = std::allocator<void>; CallbackMessageT = MinimalSubscriber; SubscriptionT = rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.202345] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = void (MinimalSubscriber::*)() const; AllocatorT = std::allocator<void>; CallbackMessageT = MinimalSubscriber; SubscriptionT = rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.202508] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = void (MinimalSubscriber::*)() const; AllocatorT = std::allocator<void>; CallbackMessageT = MinimalSubscriber; SubscriptionT = rclcpp::Subscription<MinimalSubscriber, std::allocator<void>, rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<MinimalSubscriber, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.202640] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:70:57:\x1b[m\x1b[K   required from here\n'}
[8.202761] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1268:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.202894] (cpp_pubsub) StderrLine: {'line': b' 1268 |  using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[8.203072] (cpp_pubsub) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.238716] (-) TimerEvent: {}
[8.339224] (-) TimerEvent: {}
[8.442344] (-) TimerEvent: {}
[8.542989] (-) TimerEvent: {}
[8.643460] (-) TimerEvent: {}
[8.743918] (-) TimerEvent: {}
[8.844452] (-) TimerEvent: {}
[8.945922] (-) TimerEvent: {}
[9.046371] (-) TimerEvent: {}
[9.146866] (-) TimerEvent: {}
[9.247449] (-) TimerEvent: {}
[9.355782] (-) TimerEvent: {}
[9.456284] (-) TimerEvent: {}
[9.556994] (-) TimerEvent: {}
[9.663734] (-) TimerEvent: {}
[9.764627] (-) TimerEvent: {}
[9.865262] (-) TimerEvent: {}
[9.965915] (-) TimerEvent: {}
[10.067434] (-) TimerEvent: {}
[10.169439] (-) TimerEvent: {}
[10.270446] (-) TimerEvent: {}
[10.371611] (-) TimerEvent: {}
[10.472114] (-) TimerEvent: {}
[10.533809] (cpp_pubsub) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33\x1b[m\x1b[K,\n'}
[10.534142] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/9/bits/allocator.h:46\x1b[m\x1b[K,\n'}
[10.534339] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/9/string:41\x1b[m\x1b[K,\n'}
[10.534581] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/9/stdexcept:39\x1b[m\x1b[K,\n'}
[10.534959] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/9/array:39\x1b[m\x1b[K,\n'}
[10.535141] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/9/tuple:39\x1b[m\x1b[K,\n'}
[10.535317] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/9/functional:54\x1b[m\x1b[K,\n'}
[10.535538] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:16\x1b[m\x1b[K:\n'}
[10.535737] (cpp_pubsub) StderrLine: {'line': b'/usr/include/c++/9/ext/new_allocator.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = MinimalSubscriber; _Args = {const MinimalSubscriber&}; _Tp = MinimalSubscriber]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.535922] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/alloc_traits.h:482:2:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*, _Args&& ...) [with _Up = MinimalSubscriber; _Args = {const MinimalSubscriber&}; _Tp = MinimalSubscriber; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<MinimalSubscriber>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.536147] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/experimental/buffers/intra_process_buffer.hpp:168:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename std::enable_if<std::is_same<DestinationT, std::unique_ptr<MessageT, MessageDeleter> >::value>::type rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_shared_impl(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr) [with DestinationT = std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >; MessageT = MinimalSubscriber; Alloc = std::allocator<void>; MessageDeleter = std::default_delete<MinimalSubscriber>; BufferT = std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >; typename std::enable_if<std::is_same<DestinationT, std::unique_ptr<MessageT, MessageDeleter> >::value>::type = void; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr = std::shared_ptr<const MinimalSubscriber>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.536343] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/experimental/buffers/intra_process_buffer.hpp:107:5:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_shared(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr) [with MessageT = MinimalSubscriber; Alloc = std::allocator<void>; MessageDeleter = std::default_delete<MinimalSubscriber>; BufferT = std::unique_ptr<MinimalSubscriber, std::default_delete<MinimalSubscriber> >; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr = std::shared_ptr<const MinimalSubscriber>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.536641] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/experimental/buffers/intra_process_buffer.hpp:105:8:\x1b[m\x1b[K   required from here\n'}
[10.537412] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/ext/new_allocator.h:145:20:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kuse of deleted function \xe2\x80\x98\x1b[01m\x1b[KMinimalSubscriber::MinimalSubscriber(const MinimalSubscriber&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.542806] (cpp_pubsub) StderrLine: {'line': b'  145 |  noexcept(noexcept(\x1b[01;31m\x1b[K::new((void *)__p)\x1b[m\x1b[K\n'}
[10.543005] (cpp_pubsub) StderrLine: {'line': b'      |                    \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.543844] (cpp_pubsub) StderrLine: {'line': b'  146 | \x1b[01;31m\x1b[K       _Up(std::forward<_Args>(__args)...)\x1b[m\x1b[K))\n'}
[10.545195] (cpp_pubsub) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.547717] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:35:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KMinimalSubscriber::MinimalSubscriber(const MinimalSubscriber&)\x1b[m\x1b[K\xe2\x80\x99 is implicitly deleted because the default definition would be ill-formed:\n'}
[10.549334] (cpp_pubsub) StderrLine: {'line': b'   35 | class \x1b[01;36m\x1b[KMinimalSubscriber\x1b[m\x1b[K : public rclcpp::Node\n'}
[10.549597] (cpp_pubsub) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.553207] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:35:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kuse of deleted function \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Node::Node(const rclcpp::Node&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.553565] (cpp_pubsub) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/context.hpp:34\x1b[m\x1b[K,\n'}
[10.553693] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:33\x1b[m\x1b[K,\n'}
[10.553812] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[10.553929] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[10.554044] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[10.554281] (cpp_pubsub) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/rtsd-user/dev_ws/src/cpp_pubsub/src/subscriber_member_function.cpp:20\x1b[m\x1b[K:\n'}
[10.554402] (cpp_pubsub) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:1293:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[10.554517] (cpp_pubsub) StderrLine: {'line': b' 1293 |   \x1b[01;36m\x1b[KRCLCPP_DISABLE_COPY\x1b[m\x1b[K(Node)\n'}
[10.554631] (cpp_pubsub) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.573760] (-) TimerEvent: {}
[10.677447] (-) TimerEvent: {}
[10.778679] (-) TimerEvent: {}
[10.879182] (-) TimerEvent: {}
[10.985806] (-) TimerEvent: {}
[11.086216] (-) TimerEvent: {}
[11.186719] (-) TimerEvent: {}
[11.287255] (-) TimerEvent: {}
[11.387920] (-) TimerEvent: {}
[11.399704] (cpp_pubsub) StderrLine: {'line': b'make[2]: *** [CMakeFiles/listener.dir/build.make:63: CMakeFiles/listener.dir/src/subscriber_member_function.cpp.o] Error 1\n'}
[11.401230] (cpp_pubsub) StderrLine: {'line': b'make[1]: *** [CMakeFiles/Makefile2:80: CMakeFiles/listener.dir/all] Error 2\n'}
[11.401484] (cpp_pubsub) StderrLine: {'line': b'make: *** [Makefile:141: all] Error 2\n'}
[11.405871] (cpp_pubsub) CommandEnded: {'returncode': 2}
[11.488365] (-) TimerEvent: {}
[11.535221] (cpp_pubsub) JobEnded: {'identifier': 'cpp_pubsub', 'rc': 2}
[11.557110] (-) EventReactorShutdown: {}
